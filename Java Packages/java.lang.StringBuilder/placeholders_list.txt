Format Specifiers

With printf(), you can print values such as numbers, Strings, dates, etc. To let the method know what exactly you're trying to print, you need to provide a format specifier for each of the values. Let's take a look at an example:

System.out.printf("Hello, %s!", "reader");

If executed, this code will print Hello, reader to the console. The %s symbol represents a format specifier for Strings, similar to how %d represents a format specifier for decimal numbers.

There are many format specifiers we can use. Here are some common ones:

%c - Character
%d - Decimal number (base 10)
%e - Exponential floating-point number
%f - Floating-point number
%i - Integer (base 10)
%o - Octal number (base 8)
%s - String
%u - Unsigned decimal (integer) number
%x - Hexadecimal number (base 16)
%t - Date/time
%n - Newline

If we want to print, for example, a character and an octal number, we would use %c and %o specifiers, respectively. You might notice something unusual: the newline specifier. If you're not used to printf()'s behavior from C, it might seem a bit weird to have to specify things like this.
Well, printf() doesn't write a newline by default. In fact, it does almost nothing by default. Basically, if you want something to happen, you have to make it happen yourself.